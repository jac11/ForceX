package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"strings"
)

func main() {
	// Replace with your WordPress site URL
	wordpressURL := "http://your-wordpress-site.com/wp-login.php"

	// Replace with your WordPress username and password
	username := "your_username"
	password := "your_password"

	// Create a cookie jar to handle cookies
	jar, err := cookiejar.New(nil)
	if err != nil {
		fmt.Println("Error creating cookie jar:", err)
		return
	}

	// Create an HTTP client with the cookie jar
	client := &http.Client{
		Jar: jar,
	}

	// Prepare login data
	data := url.Values{}
	data.Set("log", username)
	data.Set("pwd", password)
	data.Set("wp-submit", "Log In")
	data.Set("redirect_to", wordpressURL+"/wp-admin/")
	data.Set("testcookie", "1")

	// Create a new HTTP request
	req, err := http.NewRequest("POST", wordpressURL, strings.NewReader(data.Encode()))
	if err != nil {
		fmt.Println("Error creating HTTP request:", err)
		return
	}

	// Set headers
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Error reading response body:", err)
		return
	}

	// Check if login was successful by inspecting the response
	if strings.Contains(string(body), "dashboard") {
		fmt.Println("Login successful")
	} else {
		fmt.Println("Login failed")
	}

	// Print cookies to verify
	for _, cookie := range jar.Cookies(req.URL) {
		fmt.Println("Cookie:", cookie)
	}
}
